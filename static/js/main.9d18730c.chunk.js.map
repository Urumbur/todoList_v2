{"version":3,"sources":["components/Form.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","taskName","addTaskName","taskDate","addTaskDate","taskChecked","addTaskChecked","className","type","placeholder","value","onChange","e","target","checked","onClick","preventDefault","addTask","alert","handleClick","icon","faPlusCircle","Task","task","id","active","important","name","date","finishDate","changeTaskStatus","deleteTask","faTrashAlt","TaskList","sortTasks","tasksList","filter","done","activeTasks","map","key","doneTasks","length","App","window","Notification","permission","requestPermission","noti","body","str","localStorage","getItem","tasks","JSON","parse","loadTasks","changeTaskList","useEffect","stringify","setItem","uuid","newArray","slice","index","findIndex","Date","toISOString","sort","a","b","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d18730c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../styles/Form.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Form = (props) => {\r\n\r\n    const [taskName, addTaskName] = useState('');\r\n    const [taskDate, addTaskDate] = useState('');\r\n    const [taskChecked, addTaskChecked] = useState(false);\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        if(taskName) {\r\n            props.addTask(taskName, taskDate, taskChecked);\r\n            addTaskName('');\r\n            addTaskDate('');\r\n        } else {\r\n            alert(\"Zadanie musi mieć tekst!\");\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className='newTask'>\r\n            <h1>Lista zadań</h1>\r\n            <hr/>\r\n            <h2>Dodaj nowe zadanie</h2>\r\n            <form>\r\n                <input type='text' placeholder='Wpisz zadanie...' value={taskName} onChange={e => addTaskName(e.target.value)} />\r\n                <input type='date' value={taskDate} onChange={e => addTaskDate(e.target.value)} />\r\n                <label className=\"checkbox-label\">\r\n                    <input type='checkbox' value={taskChecked} onChange={e => addTaskChecked(e.target.checked)} />\r\n                    <span className=\"checkbox-custom\"></span>\r\n                    <span className=\"checkbox-text\">Ważne</span>\r\n                </label>\r\n                <button onClick={e => handleClick(e)}> <FontAwesomeIcon icon={faPlusCircle} className='addIcon' /> Dodaj zadanie</button>\r\n            </form>\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport '../styles/Task.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Task = (props) => { \r\n    \r\n    const {id, active, important, name, date, finishDate} = props.task;\r\n\r\n    if(active) {\r\n        return (\r\n            <li>\r\n                <div className={important ? 'important' : ''} onClick={()=>props.changeTaskStatus(id)}>               \r\n                    <p>\r\n                        <strong>{name} </strong>\r\n                        {date ? <em>Zrobić do: {date} </em> : 'Bezterminowe'}\r\n                    </p>  \r\n                </div>          \r\n                <button className='delete' onClick={()=>props.deleteTask(id)}><FontAwesomeIcon icon={faTrashAlt} className='deleteIcon' /></button>\r\n            </li>\r\n        );\r\n    } else {\r\n        return (\r\n            <li className={active ? '' : 'noActive--list'}>\r\n                <div className={active ? '' : 'noActive'} onClick={()=>props.changeTaskStatus(id)}>\r\n                    <p>\r\n                        <strong>{name} </strong>\r\n                        <em>Zrobione: {finishDate} </em>\r\n                    </p>\r\n                </div>                \r\n                <button className='delete' onClick={()=>props.deleteTask(id)}><FontAwesomeIcon icon={faTrashAlt} className='deleteIcon' /></button>\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport '../styles/TaskList.css';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    props.sortTasks();\r\n    const active = props.tasksList.filter(task => task.active);\r\n    const done =  props.tasksList.filter(task => !task.active);\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} deleteTask={props.deleteTask} changeTaskStatus={props.changeTaskStatus} />);\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} deleteTask={props.deleteTask} changeTaskStatus={props.changeTaskStatus} />);\r\n\r\n    return (\r\n        <>\r\n            <h3>{activeTasks.length > 0 ? `Zadania do zrobienia (${activeTasks.length})` : 'Brak aktywnych zadań!!!'}</h3>\r\n            <ul>\r\n                {activeTasks}\r\n                {doneTasks}\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, {useState, useEffect} from 'react';\nimport Form from './Form';\nimport TaskList from './TaskList';\nimport uuid from 'uuid/v4';\n\nconst App = () => {\n\n  if (window.Notification && Notification.permission !== \"denied\") {\n    Notification.requestPermission(() => {\n      noti();\n      })\n  }\n  const noti = () => {\n    var options = {\n      body: \"Jutro upływa termin zadania: <nazwa zadania>\",\n      icon: \"./icon512x512.png\"\n  }\n  new Notification(\"Testowe powiadomienia\", options);\n  }\n  \n  const loadTasks = () => {\n    const str = localStorage.getItem(\"tasks\");\n    let tasks = JSON.parse(str);\n    if(!tasks) {\n      return tasks = [];\n    }\n    return tasks;\n  }\n\n  const [tasksList, changeTaskList] = useState(loadTasks());\n\n  const deleteTask = id => {\n    changeTaskList(tasksList.filter(task => task.id !== id));\n  }\n\n  const changeTaskStatus = id => {\n    const newArray = tasksList.slice();\n    const index = newArray.findIndex(task => task.id === id);\n    const task = newArray[index];\n    task.active = !task.active;\n    task.finishDate ? task.finishDate = null : task.finishDate = new Date().toISOString().slice(0, 10);\n    changeTaskList(newArray);\n  }\n\n  const addTask = (name, date, important) => {\n    const task = {\n      id: uuid(),\n      name,\n      important,\n      active: true,\n      date\n    }\n    changeTaskList([...tasksList, task]);\n  } \n\n  const sortTasks = () => {\n    if(tasksList) {\n      return tasksList.sort((a,b) => b.date < a.date ? 1 : -1);\n    }\n  }\n\n  useEffect(() => {\n    const str = JSON.stringify(tasksList);\n    localStorage.setItem(\"tasks\", str);\n  }, [tasksList]);\n\n  return (\n    <div>\n      <Form addTask={addTask} />\n      <TaskList tasksList={tasksList} deleteTask={deleteTask} changeTaskStatus={changeTaskStatus} sortTasks={sortTasks} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}